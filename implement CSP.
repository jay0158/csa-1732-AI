# Function to check if the current color assignment is safe for vertex v
def is_safe(graph, colors, v, c):
    for i in range(len(graph)):
        if graph[v][i] == 1 and colors[i] == c:
            return False
    return True

# A utility function to solve the map coloring problem
def map_coloring_util(graph, m, colors, v):
    # If all vertices are assigned a color, then return true
    if v == len(graph):
        return True
    
    # Consider this vertex v and try different colors
    for c in range(1, m+1):
        # Check if assignment of color c to v is fine
        if is_safe(graph, colors, v, c):
            colors[v] = c
            # Recur to assign colors to rest of the vertices
            if map_coloring_util(graph, m, colors, v+1):
                return True
            # If assigning color c doesn't lead to a solution, then remove it
            colors[v] = 0
    
    # If no color can be assigned to this vertex, then return false
    return False

# This function solves the map coloring problem using backtracking
def map_coloring(graph, m):
    # Initialize all vertices with no color
    colors = [0] * len(graph)
    # Start with the first vertex and try to assign colors
    if not map_coloring_util(graph, m, colors, 0):
        return False, []
    # If a solution is found, return true and the colors
    return True, colors

# Example usage:
graph = [
    [0, 1, 1, 1],
    [1, 0, 1, 0],
    [1, 1, 0, 1],
    [1, 0, 1, 0]
]

m = 3  # Number of colors
result, colors = map_coloring(graph, m)
if result:
    print("Solution exists with the following colors assigned:")
    print(colors)
else:
    print("No solution exists.")
