import math

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def evaluate(board):
    # Check rows
    for row in board:
        if all(cell == "X" for cell in row):
            return 1
        elif all(cell == "O" for cell in row):
            return -1

    # Check columns
    for col in range(3):
        if all(board[row][col] == "X" for row in range(3)):
            return 1
        elif all(board[row][col] == "O" for row in range(3)):
            return -1

    # Check diagonals
    if all(board[i][i] == "X" for i in range(3)) or all(board[i][2-i] == "X" for i in range(3)):
        return 1
    elif all(board[i][i] == "O" for i in range(3)) or all(board[i][2-i] == "O" for i in range(3)):
        return -1

    return 0

def is_board_full(board):
    return all(all(cell != " " for cell in row) for row in board)

def get_available_moves(board):
    return [(row, col) for row in range(3) for col in range(3) if board[row][col] == " "]

def minimax(board, depth, is_maximizing):
    score = evaluate(board)
    if score != 0:
        return score

    if is_board_full(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for row, col in get_available_moves(board):
            board[row][col] = "X"
            score = minimax(board, depth + 1, False)
            board[row][col] = " "
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for row, col in get_available_moves(board):
            board[row][col] = "O"
            score = minimax(board, depth + 1, True)
            board[row][col] = " "
            best_score = min(score, best_score)
        return best_score

def find_best_move(board):
    best_score = -math.inf
    best_move = None
    for row, col in get_available_moves(board):
        board[row][col] = "X"
        score = minimax(board, 0, False)
        board[row][col] = " "
        if score > best_score:
            best_score = score
            best_move = (row, col)
    return best_move

def play_game():
    board = [[" " for _ in range(3)] for _ in range(3)]
    current_player = "X"

    while True:
        print_board(board)

        if current_player == "X":
            row, col = map(int, input("Player X, enter row and column (0-2): ").split())
            if board[row][col] != " ":
                print("That cell is already taken. Try again.")
                continue
            board[row][col] = "X"
        else:
            row, col = find_best_move(board)
            board[row][col] = "O"

        if evaluate(board) == 1:
            print_board(board)
            print("Player X wins!")
            break
        elif evaluate(board) == -1:
            print_board(board)
            print("Player O wins!")
            break
        elif is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break

        current_player = "O" if current_player == "X" else "X"

play_game()
