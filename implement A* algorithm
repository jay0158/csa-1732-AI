import heapq

class Node:
    def __init__(self, position, parent=None):
        self.position = position
        self.parent = parent
        self.g = 0  # Distance from start node
        self.h = 0  # Heuristic distance to end node
        self.f = 0  # Total cost

    def __lt__(self, other):
        return self.f < other.f

def heuristic(current, goal):
    # Use Manhattan distance as the heuristic
    return abs(current[0] - goal[0]) + abs(current[1] - goal[1])

def a_star(graph, start, end):
    open_list = []
    closed_list = set()
    start_node = Node(start)
    end_node = Node(end)

    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)
        closed_list.add(current_node.position)

        if current_node.position == end_node.position:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]

        neighbors = get_neighbors(graph, current_node.position)
        for next_position in neighbors:
            if next_position in closed_list:
                continue

            neighbor_node = Node(next_position, current_node)
            neighbor_node.g = current_node.g + 1
            neighbor_node.h = heuristic(neighbor_node.position, end_node.position)
            neighbor_node.f = neighbor_node.g + neighbor_node.h

            if add_to_open_list(open_list, neighbor_node):
                heapq.heappush(open_list, neighbor_node)

    return None

def get_neighbors(graph, position):
    neighbors = []
    for direction in [(0, -1), (0, 1), (-1, 0), (1, 0)]:  # Up, Down, Left, Right
        neighbor = (position[0] + direction[0], position[1] + direction[1])
        if 0 <= neighbor[0] < len(graph) and 0 <= neighbor[1] < len(graph[0]) and graph[neighbor[0]][neighbor[1]] == 0:
            neighbors.append(neighbor)
    return neighbors

def add_to_open_list(open_list, neighbor):
    for node in open_list:
        if neighbor.position == node.position and neighbor.g >= node.g:
            return False
    return True

# Example usage:
graph = [
    [0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [1, 1, 0, 0, 0]
]

start = (0, 0)
end = (4, 4)
path = a_star(graph, start, end)

print("Path found:", path)
