from collections import deque

# Define the initial state and goal state
initial_state = (3, 3, 1)  # (missionaries on the left, cannibals on the left, boat position)
goal_state = (0, 0, 0)     # (missionaries on the right, cannibals on the right, boat position)

def is_valid_state(state):
    m, c, _ = state
    if m < 0 or c < 0 or m > 3 or c > 3:
        return False
    if (m > 0 and m < c) or (3 - m > 0 and 3 - m < 3 - c):
        return False
    return True

def get_successors(state):
    m, c, boat = state
    successors = []
    if boat == 1:  # Boat on the left side
        for dm, dc in [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]:
            new_state = (m - dm, c - dc, 0)
            if is_valid_state(new_state):
                successors.append(new_state)
    else:  # Boat on the right side
        for dm, dc in [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]:
            new_state = (m + dm, c + dc, 1)
            if is_valid_state(new_state):
                successors.append(new_state)
    return successors

def bfs_solve(initial_state, goal_state):
    queue = deque([(initial_state, [])])
    visited = set()
    
    while queue:
        state, path = queue.popleft()
        if state in visited:
            continue
        visited.add(state)
        path = path + [state]
        
        if state == goal_state:
            return path
        
        for successor in get_successors(state):
            if successor not in visited:
                queue.append((successor, path))
    
    return None

def print_solution(solution):
    if solution is None:
        print("No solution found.")
    else:
        for step in solution:
            print(step)

# Find and print the solution
solution = bfs_solve(initial_state, goal_state)
print_solution(solution)
