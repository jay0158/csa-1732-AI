import heapq

class PuzzleState:
    def __init__(self, board, move=0, previous=None):
        self.board = board
        self.move = move
        self.previous = previous
        self.zero_position = self.find_zero()
    
    def find_zero(self):
        for i, row in enumerate(self.board):
            for j, val in enumerate(row):
                if val == 0:
                    return (i, j)
    
    def get_board_tuple(self):
        return tuple(tuple(row) for row in self.board)
    
    def __lt__(self, other):
        return self.move < other.move

    def __eq__(self, other):
        return self.board == other.board
    
    def __hash__(self):
        return hash(self.get_board_tuple())

def get_neighbors(state):
    neighbors = []
    x, y = state.zero_position
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    
    for dx, dy in directions:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_board = [row[:] for row in state.board]
            new_board[x][y], new_board[nx][ny] = new_board[nx][ny], new_board[x][y]
            neighbors.append(PuzzleState(new_board, state.move + 1, state))
    
    return neighbors

def heuristic(board, goal):
    h = 0
    for i in range(3):
        for j in range(3):
            if board[i][j] != 0:
                x, y = divmod(board[i][j] - 1, 3)
                h += abs(x - i) + abs(y - j)
    return h

def a_star(start, goal):
    start_state = PuzzleState(start)
    goal_state = PuzzleState(goal)
    
    open_set = []
    heapq.heappush(open_set, (0 + heuristic(start_state.board, goal_state.board), 0, start_state))
    closed_set = set()
    
    while open_set:
        _, move, current = heapq.heappop(open_set)
        
        if current.board == goal_state.board:
            path = []
            while current:
                path.append(current.board)
                current = current.previous
            return path[::-1]
        
        closed_set.add(current)
        
        for neighbor in get_neighbors(current):
            if neighbor in closed_set:
                continue
            
            tentative_g_score = move + 1
            
            f_score = tentative_g_score + heuristic(neighbor.board, goal_state.board)
            heapq.heappush(open_set, (f_score, tentative_g_score, neighbor))
    
    return None

def print_board(board):
    for row in board:
        print(" ".join(str(val) if val != 0 else ' ' for val in row))
    print()

start_board = [
    [1, 2, 3],
    [4, 0, 5],
    [7, 8, 6]
]

goal_board = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]

solution = a_star(start_board, goal_board)

if solution:
    print("Solution found in {} moves:".format(len(solution) - 1))
    for step in solution:
        print_board(step)
else:
    print("No solution found.")
